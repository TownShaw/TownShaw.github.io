<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://townshaw.github.io</id>
    <title>Welcome to TX&apos;s Blog</title>
    <updated>2021-03-31T13:08:19.260Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://townshaw.github.io"/>
    <link rel="self" href="https://townshaw.github.io/atom.xml"/>
    <subtitle>学习学习学习</subtitle>
    <logo>https://townshaw.github.io/images/avatar.png</logo>
    <icon>https://townshaw.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Welcome to TX&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[基于 Linux 的 socket 编程笔记]]></title>
        <id>https://townshaw.github.io/post/ji-yu-linux-de-socket-bian-cheng-bi-ji/</id>
        <link href="https://townshaw.github.io/post/ji-yu-linux-de-socket-bian-cheng-bi-ji/">
        </link>
        <updated>2021-03-31T12:16:15.000Z</updated>
        <content type="html"><![CDATA[<p>本文学习自 《TCP/IP网络编程》。主要记录 <code>socket</code> 编程中常见的函数以及一些 <code>Linux</code> 操作相关知识</p>
<p>直接上代码：</p>
<pre><code class="language-c">/* hello_server.c , 在服务器端运行的 socket 程序 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;sys/socket.h&gt;

void error_handling(char *message);

int main(int argc, char *argv[])
{
    int serv_sock;
    int clnt_sock;

    struct sockaddr_in serv_addr;
    struct sockaddr_in clnt_addr;
    socklen_t clnt_addr_size;

    char message[] = &quot;Hello, World!&quot;;

    if (argc != 2)
    {
        printf(&quot;Usage: %s &lt;port&gt;\n&quot;, argv[0]);
        exit(1);
    }

    serv_sock = socket(PF_INET, SOCK_STREAM, 0);    /* Create Socket, PF_INET = 3 --- IP protocol family */
    if (serv_sock == -1)
    {
        error_handling(&quot;socket(), error!&quot;);
    }

    bzero(&amp;serv_addr, sizeof(struct sockaddr_in));

    serv_addr.sin_family = AF_INET;     /* AF_INET = PF_INET --- IP protocol family */
    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    serv_addr.sin_port = htons(atoi(argv[1]));

    if (bind(serv_sock, (struct sockaddr *)(&amp;serv_addr), sizeof(serv_addr)) == -1)      /* build connection */
    {
        error_handling(&quot;bind() error!&quot;);
    }

    if (listen(serv_sock, 5) == -1)
    {
        error_handling(&quot;listen() error!&quot;);
    }

    /* handle request from client */

    clnt_addr_size = sizeof(clnt_addr);
    clnt_sock = accept(serv_sock, (struct sockaddr *)(&amp;clnt_addr), &amp;clnt_addr_size);
    if (clnt_sock == -1)
    {
        error_handling(&quot;accept() error!&quot;);
    }

    write(clnt_sock, message, sizeof(message));
    close(clnt_sock);
    close(serv_sock);


    return 0;
}

void error_handling(char *message)
{
    fputs(message, stderr);
    fputc('\n', stderr);
    exit(1);
}
</code></pre>
<pre><code class="language-c">/* hello_client.c , 在客户端运行的 socket 程序 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;sys/socket.h&gt;

void error_handling(char *message);

int main(int argc, char *argv[])
{
    int sock;
    struct sockaddr_in serv_addr;
    
    char message[30];
    int str_len;

    if (argc != 3)
    {
        printf(&quot;Usage: %s &lt;IP&gt; &lt;port&gt;\n&quot;, argv[0]);
        exit(1);
    }
    
    sock = socket(PF_INET, SOCK_STREAM, 0);
    if (sock == -1)
    {
        error_handling(&quot;socket() error!&quot;);
    }

    bzero(&amp;serv_addr, sizeof(struct sockaddr_in));

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = inet_addr(argv[1]);
    serv_addr.sin_port = htons(atoi(argv[2]));

    if (connect(sock, (struct sockaddr *)(&amp;serv_addr), sizeof(serv_addr)) == -1)
    {
        error_handling(&quot;connect() error!&quot;);
    }

    str_len = read(sock, message, sizeof(message) - 1);
    if (str_len == -1)
    {
        error_handling(&quot;read() error!&quot;);
    }

    printf(&quot;Message from server %s : %s\n&quot;, argv[1], message);
    close(sock);

    return 0;
}

void error_handling(char *message)
{
    fputs(message, stderr);
    fputc('\n', stderr);
    exit(1);
}
</code></pre>
<p>下面解释程序中出现的各种结构体、函数以及没见过的常量.</p>
<ol>
<li><code>struct sockaddr_in</code>:<pre><code class="language-c">struct sockaddr_in
{
    sa_family_t      sin_family;      //地址族 (Address Family)
    uint16_t         sin_port;        //16 位 TCP/UDP 端口号
    struct in_addr   sin_addr;        //32 位 IP 地址
    char             sin_zero[8];     //不使用
}

struct in_addr
{
    in_addr_t        s_addr;     //32 位 IPv4 地址
}
</code></pre>
</li>
</ol>
<ul>
<li><code>sin_family</code> ：定义了使用的协议族，不同的协议族适用的地址族不同。比如 IPv4 使用 4 字节地址族，IPv6 使用 16 字节地址族。部分可供取值如下表所示：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">地址族(Address Family)</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AF_INET</td>
<td style="text-align:center">IPv4 网络协议中使用的地址族</td>
</tr>
<tr>
<td style="text-align:center">AF_INET6</td>
<td style="text-align:center">IPv6 网络协议中使用的地址族</td>
</tr>
<tr>
<td style="text-align:center">AF_LOCAL</td>
<td style="text-align:center">本地通信中采用的 UNIX 协议的地址族</td>
</tr>
</tbody>
</table>
<ul>
<li><code>sin_port</code> ：保存 16 位端口号，重点在于，它以网络字节序保存。</li>
<li><code>sin_addr</code> ：保存 32 位 IP 地址信息，且也是以网络字节序保存。</li>
<li><code>sin_zero</code> ：不使用，仅用于将该结构体大小填充至与结构体 <code>struct sockaddr</code> 相同。便于这两个结构体之间进行转化。</li>
</ul>
<ol start="2">
<li><code>socket()</code>：用于创建一个新的套接字<pre><code class="language-c">int socket(int domain, int type, int protocol);
/* 成功时返回文件描述符，失败时返回 -1 */
</code></pre>
<ul>
<li><code>domain</code>：即是上文中提到的地址族。</li>
<li><code>type</code>：指示套接字类型，有面向连接的套接字 <code>SOCK_STREAM</code>、面向消息的套接字 <code>SOCK_DGRAM</code>. 其中 <code>SOCK_STREAM</code> 类似于 <code>TCP</code>，提供可靠、按序传递、基于字节的面向连接数字传输方式；<code>SOCK_DGREAM</code> 类似于 <code>UDP</code>，提供不可靠、不按序传递、以数据的高速传输为目的的服务。</li>
<li><code>protocol</code>：可以为0，表示不显式指定使用的协议。该项(已知)可取的值有：<code>IPPROTP_TCP</code> 使用 <code>TCP</code> 协议，<code>IPPROTP_UDP</code> 使用 <code>UDP</code> 协议。</li>
</ul>
</li>
<li><code>bind()</code>：用于为套接字分配地址信息。<pre><code class="language-c">int bind(int sockfd, struct sockaddr *myaddr, socklen_t addrlen)
/* 成功时返回 0，失败是返回 -1 */
</code></pre>
<ul>
<li><code>sockfd</code>：存放待分配地址的套接字的文件描述符。</li>
<li><code>myaddr</code>：存放为套接字分配的地址信息 --- IP 地址和端口号等。</li>
<li><code>addrlen</code>：暂不清楚。</li>
</ul>
</li>
<li><code>listen</code>, <code>accept</code> 以后再说，现在不是很清楚。</li>
<li><code>connect</code>:<pre><code class="language-c">int connect(int sockfd, struct sockaddr *serv_addr, socklen_t addrlen)
/* 连接成功时返回 0，否则返回 -1 */
</code></pre>
<ul>
<li><code>sockfd</code>：</li>
<li><code>serv_addr</code>：</li>
<li><code>addrlen</code>：</li>
</ul>
</li>
<li><code>htonl()</code>, <code>htons()</code>, <code>inet_addr()</code>：这涉及到 IP 地址在网络字节序、字节序、点分十进制字符串之间的转换.<br>
网络字节序、字节序：<br>
这和存储数据的 大端序(高字节放在低地址)和小端序(高字节放在高地址) 有关。因为 Intel, AMD CPU都是使用小端序，而网络传输数据时采用大端序 --- 即网络字节序。所以需要将数据转化为大端序格式之后再进行网络传输。这也是为什么需要 <code>htonl()</code> 和 <code>htons()</code> 函数。<br>
<code>htons(), htonl()</code> 函数中 <code>h</code> 代表主机(host)字节序，<code>n</code>代表网络(network)字节序。因此这两个函数就是用于将主机字节序转化为网络字节序的。最后的 <code>s</code> 和 <code>l</code> 分别代表对 <code>unsigned short</code> 和 <code>unsigned long</code> 类型进行转化。返回的类型与输入类型相同。<br>
对称地，有函数：<code>ntohs(), ntohl()</code>，作用与上面类似。<pre><code class="language-c">in_addr_t inet_addr(const char *string)
/* 成功时返回 32 位大端序整形数组，失败时返回 INADDR_NONE */
</code></pre>
该函数用于将人们常用的点分十进制表示的 IP 地址转化为 32 位大端序二进制表示的 IP 地址，用于计算机的输入。<pre><code class="language-c">char * inet_ntoa(struct in_addr adr)
/* 成功时返回转换的字符串地址值，失败是返回 -1 */
</code></pre>
将大端序的 IP 地址(存放在结构体 in_addr 中)转化为点分十进制字符串表示的 IP 地址，并返回指向该 IP 地址字符串的指针。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ 学习笔记 03]]></title>
        <id>https://townshaw.github.io/post/c-xue-xi-bi-ji-03/</id>
        <link href="https://townshaw.github.io/post/c-xue-xi-bi-ji-03/">
        </link>
        <updated>2021-02-12T12:51:23.000Z</updated>
        <content type="html"><![CDATA[<p>本文主要讲 <code>C++</code> 中类的继承。</p>
<h1 id="一-c-类继承">一. <code>C++</code> 类继承</h1>
<h2 id="1-构造函数">1. 构造函数</h2>
<p>派生类不能直接访问基类的私有成员，而必须通过基类的方法进行访问。因此派生类在构造基类的私有成员时，必须使用基类的构造函数来实现。即派生类构造函数必须使用基类构造函数。</p>
<p>创建派生类对象时，程序首先创建基类对象。这意味着基类对象应当在程序进入派生类构造函数之前被创建。如果没有显式地调用基类构造函数，则编译器会自动使用默认的基类构造函数。比如：<span id="Scientist"></span></p>
<pre><code class="language-c++">class Scientist
{
private:
    std::string name;
    int age;
public:
    Scientist()
    {
        name.clear();
        age = 0;
	}
    Scientist(const char *_name, int _age)
    {
        this-&gt;name = _name;
        this-&gt;age = _age;
	}
    void show()
    {
        std::cout &lt;&lt; &quot;Name: &quot; &lt;&lt; this-&gt;name &lt;&lt; &quot;\t Age: &quot; &lt;&lt; this-&gt;age;
	}
}

class Physicist : public Scientist	//公有继承
{
private:
    std::string research_topic;
public:
    Physicist()	//会默认调用 Scientist 的默认构造函数, 如默认构造函数不存在则会报错
    {
        research_topic.clear();
    }
    Physicist(const char * _name, int _age, const char * re_topic)
    {
        //如果以下调用语句不存在, 则会默认调用基类的默认构造函数
        Scientist(_name, _age);				//调用基类构造函数
        this-&gt;research_topic = _re_topic;
	}
    void show()
    {
        std::cout &lt;&lt; &quot;Name: &quot; &lt;&lt; this-&gt;name &lt;&lt; &quot;\t Age: &quot; &lt;&lt; this-&gt;age &lt;&lt; &quot;\t Research Topic: &quot; &lt;&lt; research_topic;
	}
}
</code></pre>
<h2 id="2-基类和派生类之间的特殊关系">2. 基类和派生类之间的特殊关系</h2>
<ol>
<li>
<p>派生类可以直接访问基类中的非私有方法、数据成员（即可访问公有 <code>public</code> ，保护 <code>protected</code> 数据、方法）。</p>
</li>
<li>
<p>基类指针可以在不进行显式类型转换的情况下指向派生类对象；基类引用可以在不进行显式类型转化的情况下引用派生类对象。</p>
<p>但是基类的指针或引用只能调用基类的方法，不能调用派生类的方法。比如<a href="#Scientist">上例</a>中：</p>
<pre><code class="language-c++">Scientist *phy_1 = new Physicist(&quot;A&quot;, 24, &quot;B&quot;);

phy_1-&gt;show();	//这里调用的实际上是基类的 show() 方法
</code></pre>
</li>
<li>
<p>派生类指针 or 引用不能在不进行显式类型转化的情况下指向基类对象。</p>
</li>
</ol>
<h1 id="二-继承模型">二. 继承模型</h1>
<p>继承的模型分为两种：</p>
<ul>
<li><code>is-a</code> 模型：比如<a href="#Scientist">上例</a>中，物理学家<strong>是一种</strong>科学家，这就是一种 <code>is-a</code> 模型。公有继承非常适合对这种关系进行建模。</li>
<li><code>has-a</code> 模型：比如午餐有水果、肉类等等。这里就不能使用 <code>is-a</code> 模型建模，否则会得出 <em>水果是一种午餐</em> 这种奇怪的模型。但是如果用 <code>has-a</code> 模型进行建模，可以得到 <em>水果是午餐的一部分</em> 的结论。这相比前面的结论显然更加合适。<code>has-a</code> 模型的建模可以通过在<strong>类中包含其他的对象成员</strong>实现，也可以通过<strong>私有继承</strong>来实现。</li>
</ul>
<p>现在先来讨论 <code>is-a</code> 模型的<strong>公有继承</strong>：</p>
<h2 id="1-多态公有继承">1. 多态公有继承</h2>
<p>类的继承的一个重要功能就是<strong>多态</strong>，即让某一些方法在基类和派生类中的行为是不同的。在 <code>C++</code> 中有两种机制可以实现多态：</p>
<ul>
<li>在派生类中重新定义基类的方法</li>
<li>使用虚方法</li>
</ul>
<p>比如在<a href="#Scientist">上例</a>中，就是用了第一种方法，即在 <code>Physicist</code> 类中重新定义了基类 <code>Scientist</code> 的方法 <code>show()</code> 。这在对派生类对象引用 <code>show()</code> 方法时，调用的是 <code>Physicist::show()</code> ，而 <code>Scientist::show()</code> 则被隐藏起来了。</p>
<pre><code class="language-c++">Physicist *phy_2 = new Physicist(&quot;A&quot;, 24, &quot;B&quot;);

phy_2-&gt;show();	//调用的是 Physicist::show()
</code></pre>
<p>可能你已经注意到了，这个例子和<a href="#Scientist">上面的例子</a>：</p>
<pre><code class="language-c++">Scientist *phy_1 = new Physicist(&quot;A&quot;, 24, &quot;B&quot;);

phy_1-&gt;show();	//这里调用的实际上是 Scientist::show() 方法
</code></pre>
<p>几乎完全一样，对象都是 <code>Physicist</code> 对象，只是指向的指针不同，为什么会导致调用的方法不同呢？</p>
<p>这其实是因为 <code>C++</code> 编译器在判断指针 or 引用调用的方法时，是根据指针 or 引用的类型来判断的，而不是指针 or 引用指向的对象类型来判定。所以尽管 <code>Scientist</code> 指针指向的是 <code>Physicist</code> 对象，但是在通过 <code>Scientist</code> 指针调用方法时，调用的仍然是 <code>Scientist</code> 的方法。</p>
<p>那有没有什么办法能让 <code>Scientist</code> 指针调用 <code>show()</code> 函数时，调用 <code>Physicist::show()</code> 呢？也就是说，通过指针指向的对象类型来判定要调用的方法，而不是通过指针的类型来判定？要做到这一点，就可以使用第二种方法，使用<strong>虚函数</strong>。</p>
<h3 id="1-虚函数">(1). 虚函数</h3>
<p>把虚函数放在一个三级标题下似乎有点不太合适，因为虚函数十分重要、而又有些复杂。放在这貌似有点和它的地位不符。不过不管了继续说。</p>
<h4 id="a-虚函数的工作原理">(a). 虚函数的工作原理</h4>
<p>通常，编译器处理虚函数的方法都是：给每个对象添加一个隐藏成员。隐藏成员中保存了一个指向函数地址数组的指针。这种数组称为<strong>虚函数表（vtbl）</strong>。虚函数表中存储了为类对象进行声明的虚函数的指针。例如，基类对象包含一个指针，该指针指向基类中所有虚函数的地址表。派生类对象将包含一个指向独立地址表的指针。如果派生类提供了虚函数的新定义，该虚函数表将保存新函数的地址；如果派生类没有重新定义虚函数，该 <code>vtbl</code> 将保存函数原始版本的地址。如果派生类定义了新的虚函数，则该函数的地址也将被加入到 <code>vtbl</code> 中。</p>
<p>下图是一个很好的范例。</p>
<figure data-type="image" tabindex="1"><img src="https://townshaw.github.io/post-images/1613134345985.png" alt="" loading="lazy"></figure>
<h4 id="b-虚函数的使用">(b). 虚函数的使用</h4>
<p>如<a href="#Scientist">上例</a>所说，如果不将 <code>Scientist::show()</code> 声明为虚函数，则在使用指针对对象方法进行引用时，编译器会根据指针的类型去调用相应的方法。这种做法又称为静态联编。</p>
<p>但如果将 <code>Scientist::show()</code> 声明为虚函数，则编译器会根据指针指向的对象类型去调用相应的方法。这种做法称为动态联编。</p>
<p>虽然动态联编看起来很好很方便，但是静态联编的效率比动态联编要高。因此对于不需要在派生类中重新定义的函数，不需要将其声明为虚函数，而仅需要将可能在派生类中重新定义的函数声明为虚函数即可。使用范例如下：</p>
<pre><code class="language-c++">class Scientist
{
private:
    std::string name;
    int age;
public:
    Scientist()
    {
        name.clear();
        age = 0;
	}
    Scientist(const char *_name, int _age)
    {
        this-&gt;name = _name;
        this-&gt;age = _age;
	}
    virtual void show()		//定义虚函数
    {
        std::cout &lt;&lt; &quot;Name: &quot; &lt;&lt; this-&gt;name &lt;&lt; &quot;\t Age: &quot; &lt;&lt; this-&gt;age;
	}
}

class Physicist : public Scientist	//公有继承
{
private:
    std::string research_topic;
public:
    Physicist()	//会默认调用 Scientist 的默认构造函数, 如默认构造函数不存在则会报错
    {
        research_topic.clear();
    }
    Physicist(const char * _name, int _age, const char * re_topic)
    {
        //如果以下调用语句不存在, 则会默认调用基类的默认构造函数
        Scientist(_name, _age);				//调用基类构造函数
        this-&gt;research_topic = _re_topic;
	}
    void show()
    {
        std::cout &lt;&lt; &quot;Name: &quot; &lt;&lt; this-&gt;name &lt;&lt; &quot;\t Age: &quot; &lt;&lt; this-&gt;age &lt;&lt; &quot;\t Research Topic: &quot; &lt;&lt; research_topic;
	}
}
</code></pre>
<p>区别仅仅在于在基类中将 <code>show()</code> 定义为虚函数。但是实际上两个类中都多了两个成员：虚函数表指针和虚函数表。在调用方法时，也不同于原来的静态联编，而是通过虚函数表实现动态联编。</p>
<p>除了将普通成员函数声明为虚函数之外，一般都需要将基类的析构函数也声明为虚函数。因为不同的派生类可能会在堆中开辟不同的内存区域，因此需要对每个派生类进行单独处理。同时先析构派生类，再析构基类。</p>
<h2 id="2-包含对象成员的类span-idobj-in-classspan">2. 包含对象成员的类<span id="obj in class"></span></h2>
<p>这种方式是对 <code>has-a</code> 模型进行建模，这个想必都很熟悉且都用过。比如我要实现一个 <code>Student</code> 类，每个学生都有名字，同时也会有一连串的分数（比如高中生），显然这就是一个 <code>has-a</code> 的模型。那么我就可以使用包含对象成员的类来实现这个模型：</p>
<pre><code class="language-c++">class Student
{
private:
    std::string name;
    std::vector scores;		//name, scores 就是其他类的对象
	...
public:
    ...
};
</code></pre>
<h2 id="3-私有继承">3. 私有继承</h2>
<p>私有继承也是对 <code>has-a</code> 进行建模，这实际上于包含对象成员的类的方式十分地相似，但是也有一些不同的地方。</p>
<p>实现私有继承与实现多态公有继承的不同之处在于继承时的写法：</p>
<pre><code class="language-c++">class Physicist : public Scientist		//公有继承
{};

class Physicist : private Scientist		//私有继承
{};

class Physicist : Scientist				//私有继承
{};
</code></pre>
<p>进行私有继承之后，基类的公有成员和保护成员都会称为派生类的私有成员，这意味着基类方法将不会成为派生对象公有接口的一部分，但可以在派生类的成员函数中使用它们。</p>
<p>比如我们使用私有继承再次实现 <code>Strudent</code> 类：</p>
<pre><code class="language-c++">class Student : private std::string, private std::vector	//相当于 string &amp; vector 成为 Student 的私有成员
{};
</code></pre>
<h3 id="1-构造函数-2">(1). 构造函数</h3>
<p>私有继承的构造函数与公有继承也有不同。比如对于[上例](#obj in class)而言，因为定义了 <code>name</code> 和 <code>scores</code> 对象，因此在构造函数中只需要对这两个对象进行初始化即可：</p>
<pre><code class="language-c++">class Student
{
private:
    std::string name;
    std::vector scores;
public:
	Student(const char * _name, const std::vector &amp; _scores)
    {
        this-&gt;name = _name;
        this-&gt;scores = _scores;		//随便写一下, 不知道是不是合法赋值, 不重要
	}
};
</code></pre>
<p>但在私有继承中，初始化则应该为：</p>
<pre><code class="language-c++">class Student : private std::string, private std::vector
{
public:
    Student(const char * _name, const std::vector &amp; _scores)
    {
        std::string(_name);
        std::vector(_scores);
	}
};
</code></pre>
<p>可见在构造函数中的引用从标识符（对象名）变成了直接对类名进行引用。</p>
<h3 id="2-访问基类的方法">(2). 访问基类的方法</h3>
<p>同构造函数类似，私有继承访问基类的方法也是通过类名 + 作用域解析运算符来实现。比如 <code>Student</code> 类中，取得名字的长度：</p>
<pre><code class="language-c++">class Student : private std::string, private std::vector
{
public:
    int name_size()
    {
        return std::string::size();
	}
};
</code></pre>
<h3 id="3-访问基类对象">(3). 访问基类对象</h3>
<p>比如我现在想要返回 <code>Student</code> 类的名字，那么可以对 <code>*this</code> 使用显式类型转化，取得 <code>std::string</code> 对象：</p>
<pre><code class="language-c++">class Student : private std::string, private std::vector
{
public:
    const std::string &amp; getName()
    {
        return (const std::string &amp;)(*this);
	}
};
</code></pre>
<p>同理，要取得分数就仅将 <code>std::string</code> 改为 <code>std::vector</code> 即可。</p>
<p>关于私有继承和包含对象成员的类的选择：通常应使用包含来对 <code>has-a</code> 进行建模；但是如果新类需要访问原有类的保护成员（<code>protected</code>）或者需要重新定义虚函数，则使用私有继承。</p>
<h2 id="4-多重继承">4. 多重继承</h2>
<p>明天再写~</p>
<h1 id="三-抽象基类-abstract-base-class-abc">三. 抽象基类 (Abstract Base Class, ABC)</h1>
<p>《C++ Primer Plus》上介绍了一个很形象的例子：假设我们正在为椭圆和圆分别编写类。因为圆是一种特殊的椭圆，因此我们可以使圆类继承自椭圆类。这样看似很合适，但是实际上仔细思考就会发现很多问题：</p>
<ul>
<li>椭圆需要长轴、短轴来描述大小，需要方向角来描述方向，但是圆只需要一个半径即可，且圆没有方向的概念，因此让圆类直接继承自椭圆类会造成数据冗余。</li>
<li>椭圆的缩放、移动等操作作用于长轴、短轴、方向角等数据成员，这些方法作用于圆上是会看起来很笨，因为操作圆并不需要改变这么多数据成员。</li>
</ul>
<p>总的来说，相比继承椭圆类，直接重新定义一个 <code>Circle</code> 类反而更加方便。但这样又忽略了椭圆和圆之间存在很多共同点的事实，导致又会做一些重复性的工作。</p>
<p>因此为了解决上述类似的问题，<code>C++</code> 提供了一种解决办法：将椭圆和圆的一些共性抽象出来，将这些共性放入一个抽象基类（ABC）中，然后再由抽象基类派生出椭圆和圆类，在这两个类中再去分别实现他们特殊的地方。</p>
<p>比如椭圆和圆都有中心点的坐标、移动操作、求面积操作，因此可以将这三个数据 or 方法放入抽象基类中。比如 <code>Area()</code> 求面积函数，对于椭圆需要知道长轴、短轴，对于圆只需要知道半径，因此对于不同的派生类，<code>Area()</code> 方法是不同的，所以在抽象基类中也不能实现该方法。所以索性在抽象基类中直接不做任何实现，而仅仅进行简单的声明。</p>
<p>抽象基类的实现如下，将待实现的函数声明为<strong>纯虚函数</strong>，声明方法为在函数的最后加上 <code>= 0</code>：</p>
<pre><code class="language-c++">class BaseEllipse
{
private:
    double x;
    double y;	//中心点坐标
    ...
public:
    BaseEllipse(double x0, double y0) : x(x0), y(y0) {}		//构造函数
    virtual ~BaseEllipse() {}		//虚析构函数
    void Move(double nx, double ny) {x = nx; y = ny};	//不需重写, 因为椭圆和圆的移动都是相同的
    virtual void Area() const = 0;	//需要重写, 定义为虚函数
};
</code></pre>
<p>注意：当类声明中包含纯虚函数时，不能创建该类的对象。而在派生类中，则必须对<strong>未实现的</strong>纯虚函数重新定义。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ 学习笔记 02]]></title>
        <id>https://townshaw.github.io/post/c-xue-xi-bi-ji-02/</id>
        <link href="https://townshaw.github.io/post/c-xue-xi-bi-ji-02/">
        </link>
        <updated>2021-02-11T05:26:28.000Z</updated>
        <content type="html"><![CDATA[<p>这篇主讲 <code>C++</code> 对象和类。</p>
<h1 id="一-c-类">一. <code>C++</code> 类</h1>
<h2 id="1-const-成员函数">1. <code>const</code> 成员函数</h2>
<p>对函数使用 <code>const</code> 关键字，是用于<strong>保证函数的内部不会修改调用的对象</strong>。<code>const</code> 关键字应该放在函数的声明括号之后，比如：</p>
<pre><code class="language-c++">class A
{
private:
    int foo = 0;
public:
    void show() const
    {
        std::cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; std::endl;
	}
	/*	这里声明为 const, 但是实际上改变了 foo, 因此编译器会报错
    void set() const
    {
        foo = 1;
	}
	*/
}
</code></pre>
<h2 id="2-运算符重载">2. 运算符重载</h2>
<p>运算符重载本质上也是一个类的成员函数，不同之处在于它可以使用 <code>C++</code> 有效的运算符进行简略表达，这么做的目的主要是使得对象的操作更加的美观 + 直观。这么做的好处出了好看之外，还有能够抽象凸显出对象操作的本质，使得更能为程序员所理解、接受。</p>
<p>其实我们已经见过很多重载了，比如最简单的加法 <code>+</code> ，我们在将数字进行相加时，实际上有多种情况需要考虑。比如：</p>
<pre><code class="language-c++">1 + 1
1 + 1.0
1.0 + 1.0
</code></pre>
<p>这三种分别表示这不同的数字类型进行加法。<code>C/C++</code> 处理这种算术的方式就是使用运算符重载。</p>
<p>如果我们要在类中重载运算符，只需要使用如下的格式：</p>
<pre><code class="language-c++">operatorop(argument-list)

//比如
operator+=(vector&lt;int&gt; &amp;nums1, vector&lt;int&gt; &amp;nums2)
{//默认长度相同, 重载 += 运算符
    for (int i = 0; i &lt; nums1.size(); i++)
    {
        nums1[i] += nums2[i];
	}
}
</code></pre>
<p>上例就重载了 <code>+=</code> 运算符。但是要注意的是运算符重载只能重载 <code>C++</code> 中存在的运算符，比如不能弄出一个 <code>operator@(...)</code> 的运算符重载，因为 <code>C++</code> 中 <code>@</code> 并不是一个有效地运算符，因此不能用于重载。</p>
<p>这里还有一个小细节需要交代，比如在上例中：</p>
<pre><code class="language-c++">vector&lt;int&gt; nums1;
vector&lt;int&gt; nums2;

nums1 += nums2;
</code></pre>
<p>其中 <code>nums1 += nums2</code> 相当于 <code>nums1.operator+=(nums2)</code> ，因此函数的调用者是 <code>nums1</code> ，被调用者是 <code>nums2</code> 。</p>
<h3 id="1-重载的限制">(1). 重载的限制</h3>
<ol>
<li>重载后的运算符必须至少有一个操作数是<strong>用户自定义</strong>的类型，这将防止用户为标准类型重载运算符。</li>
<li>使用运算符时不能违反运算符原来的句法规则。比如不能将 <code>%</code> 变成单目运算符。</li>
<li>不能修改运算符的优先级。比如重载了 <code>+</code> 和 <code>*</code> ，则 <code>*</code> 的优先级比 <code>+</code> 高。</li>
<li>不能创建新的运算符。</li>
<li>不能重载以下的运算符：
<ul>
<li><code>sizeof</code></li>
<li><code>.</code>: 成员运算符</li>
<li><code>. *</code>: 成员指针运算符</li>
<li><code>::</code>: 作用域解析运算符</li>
<li><code>?:</code>: 条件运算符</li>
<li><code>typeid</code>:  <code>RTTI</code>运算符</li>
<li><code>const_cast</code>: 强制类型转换运算符</li>
<li><code>dynamic_cast</code>: 强制类型转换运算符</li>
<li><code>reinterpret_cast</code>: 强制类型转换运算符</li>
<li><code>static_cast</code>: 强制类型转换运算符</li>
</ul>
</li>
<li>下面的运算符只能通过<strong>成员函数</strong>进行重载：
<ul>
<li><code>=</code>: 赋值运算符</li>
<li><code>()</code>: 函数调用运算符</li>
<li><code>[]</code>: 下标运算符</li>
<li><code>-&gt;</code>: 通过指针访问类成员的运算符</li>
</ul>
</li>
</ol>
<h2 id="3-友元">3. 友元</h2>
<p>通常，公有类方法提供对类对象私有部分唯一的访问途径。但有时这种限制过于严格，所以 <code>C++</code> 提供了另一种访问途径：<strong>友元</strong>。</p>
<p>友元分为三类：</p>
<ul>
<li>友元函数</li>
<li>友元类</li>
<li>友元成员函数</li>
</ul>
<p>通过让函数成为类的友元，可以赋予该函数与类的成员函数相同的访问权限。</p>
<h3 id="1-友元函数">(1). 友元函数</h3>
<h4 id="创建友元">创建友元</h4>
<p>创建友元函数的第一步是将其放在类声明中，并在原型声明前加上关键字 <code>friend</code>：</p>
<pre><code class="language-c++">friend Time operator*(double m, Time &amp; t);	//来自 C++ Primer Plus 的例子
</code></pre>
<p>该原型意味着以下两点：</p>
<ul>
<li>虽然 <code>operator*()</code> 函数是在类声明中声明的，但他不是成员函数，所以不能使用成员运算符 <code>.</code> 来访问。</li>
<li>虽然 <code>operator*()</code> 函数不是成员函数，但它与成员函数具有相同的访问权限。</li>
</ul>
<p>另外，在编写友元函数的定义时，不需要加上作用域限定 <code>*::</code> ，同时，在定义中也不要加上关键字 <code>friend</code>：</p>
<pre><code class="language-c++">Time operator*(double m, Time &amp; t)	//将时间 t 放大 m 倍
{
    Time result;
    long totalminutes = t.hours * m * 60 + t.minutes * m;
    result.hours = totalminutes / 60;
    result.minutes = totalminutes % 60;
    return result;
}
</code></pre>
<h2 id="4-特殊成员函数">4. 特殊成员函数</h2>
<h3 id="1-默认构造函数">(1). 默认构造函数</h3>
<p>如果没有提供任何构造函数，<code>C++</code> 将创建默认构造函数。比如对于 <code>Time</code> 类，如果没有提供任何构造函数，则编译器将提供如下默认构造函数：</p>
<pre><code class="language-c++">Time::Time() {}
</code></pre>
<h3 id="2-复制构造函数">(2). 复制构造函数</h3>
<p>复制构造函数用于将一个对象复制到新创建的对象中去。类的复制构造函数原型通常如下：</p>
<pre><code class="language-c++">Class_name(const Class_name &amp;)
</code></pre>
<p>它接受一个指向类对象的引用作为参数，例如上例中的 <code>Time</code> 类的复制构造函数原型如下：</p>
<pre><code class="language-c++">Time(const Time &amp;)
</code></pre>
<h3 id="3-默认复制构造函数">(3). 默认复制构造函数</h3>
<p>默认的复制构造函数逐个复制非静态成员的值（成员复制也称为浅复制），复制的是成员的值。</p>
<p>因此在对于字符串等情况，默认复制构造函数复制的是字符串的地址，并没有创建出一个新的字符串。因此若要避免仅仅复制字符串的地址，需要用户自定义显式默认复制函数进行深度复制。比如：</p>
<pre><code class="language-c++">class myString
{
private:
    char * str;
public:
    myString() {str = nullptr;}
    myString(const char * s)
    {
        str = s;
	}
    myString(const myString &amp;mS)
    {
        int length = strlen(mS.str);
        str = new char[length + 1];
        strcpy(str, mS.str);
	}
};
</code></pre>
<p>使用复制构造函数的例子如下：</p>
<pre><code class="language-c++">myString s1(&quot;Hello&quot;);

myString s2(s1);	//复制
myString s3 = s1;	//复制
myString s4 = myString(s1);	//复制
myString *s5 = new myString(s1);	//复制
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ 学习笔记 01]]></title>
        <id>https://townshaw.github.io/post/cpp-xue-xi-bi-ji-01/</id>
        <link href="https://townshaw.github.io/post/cpp-xue-xi-bi-ji-01/">
        </link>
        <updated>2021-02-10T14:36:02.000Z</updated>
        <content type="html"><![CDATA[<p>因为本文是按照《C++ Primer Plus》这本书的顺序来学习的，所以内容可能会比较乱，不过先凑合写着吧。以后闲下来了再来整理。</p>
<h1 id="1-函数指针">1. 函数指针</h1>
<h2 id="1-获取函数的地址">1. 获取函数的地址</h2>
<p>只需要使用函数名（后面不需要带括号、带参数）即可获得函数的地址。比如 <code>think()</code> 是一个函数，则 <code>think</code> 就是一个这个函数的地址。比如：</p>
<pre><code class="language-c++">progress(think)		//传递函数的地址
progress(think())	//传递函数的返回值
</code></pre>
<h2 id="2-声明函数指针">2. 声明函数指针</h2>
<p>声明只想某种数据类型的指针时，必须指明指针指向的类型。声明函数指针是也是如此。</p>
<p>函数指针的声明与普通指针的声明有一点区别，在于函数指针申明时还必须加上对应函数的参数列表，比如：</p>
<pre><code class="language-c++">double foo(int i, double c) {}	//声明函数 foo

double * pd;	//普通指针声明
double (*pf)(int, double);	//声明函数指针, 表示 pf 为指向一个接受 int, double 参数, 返回 double 数据的函数
pf = foo;	//赋值
</code></pre>
<p>声明函数指针时，还需要注意优先级。具体体现在声明 <code>pf</code> 时，必须要用括号将 <code>*pf</code> 括起，否则 <code>*</code> 会优先和 <code>double</code> 结合。</p>
<p>注意，函数指针指向的函数的特征标（接受的参数、返回类型）必须和函数指针的声明保持一致，否则编译器会拒绝这种赋值。</p>
<h2 id="3-使用指针来调用函数">3. 使用指针来调用函数</h2>
<p>如上例中，<code>*pf</code> 和函数 <code>foo</code> 扮演的角色、功能都是相同的，所以可以直接将 <code>*pf</code> 当作函数名使用即可。</p>
<p>这里有两种使用方式，如下：</p>
<pre><code class="language-c++">(*pf)(1, 1.0);	//对指针解引用
pf(1, 1.0);		//直接对指针进行调用
</code></pre>
<p>《C++ Primer Plus》上说两种方式都可行，但是我自己试了一次只有第一种方式可行。而且第一种方式我个人认为更好，因为这样直接地表示出来当前正在用函数指针。</p>
<h1 id="2-静态持续变量">2. 静态持续变量</h1>
<p><code>C++</code> 中为静态存储持续性变量提供了 3 种链接性：外部链接性（可在其他文件中访问）、内部链接性（只能在当前文件中使用）、无链接性（只能在当前函数或代码块中使用）。</p>
<p>下面给出这 3 种变量的创建范例：</p>
<pre><code class="language-c++">int global = 0;		//静态持续变量，具有外部链接性
static int one_file = 0;	//静态持续变量，具有内部链接性

int main()
{
    int i = 0;	//局部变量
    static int count = 0;	//静态持续变量，无链接性
}
</code></pre>
<p>上面的 <code>count</code> 变量看似是一个静态变量，可能和 <code>one_file</code> 地位是相同的。但是实际上 <code>count</code> 和 <code>i</code> 时类似的，尽管它是静态变量，但是和 <code>i</code> 一样只能在 <code>main()</code> 函数中使用，作用域为局部，没有链接性。</p>
<p>但它与 <code>i</code> 不同的地方在于，即使在 <code>main()</code> 函数没有被执行的时候，<code>count</code> 也存在于内存中。</p>
<p>下标给出 5 种变量的存储方式：</p>
<table>
<thead>
<tr>
<th style="text-align:center">存储描述</th>
<th style="text-align:center">持续性</th>
<th style="text-align:center">作用域</th>
<th style="text-align:center">链接性</th>
<th style="text-align:center">如何声明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">自动</td>
<td style="text-align:center">自动</td>
<td style="text-align:center">代码块</td>
<td style="text-align:center">无</td>
<td style="text-align:center">在代码块中</td>
</tr>
<tr>
<td style="text-align:center">寄存器</td>
<td style="text-align:center">自动</td>
<td style="text-align:center">代码块</td>
<td style="text-align:center">无</td>
<td style="text-align:center">在代码块中，使用关键字 <code>register</code></td>
</tr>
<tr>
<td style="text-align:center">静态、无链接性</td>
<td style="text-align:center">静态</td>
<td style="text-align:center">代码块</td>
<td style="text-align:center">无</td>
<td style="text-align:center">在代码块中，使用关键字 <code>static</code></td>
</tr>
<tr>
<td style="text-align:center">静态、外部链接性</td>
<td style="text-align:center">静态</td>
<td style="text-align:center">文件</td>
<td style="text-align:center">外部</td>
<td style="text-align:center">不在任何函数内</td>
</tr>
<tr>
<td style="text-align:center">静态、内部链接性</td>
<td style="text-align:center">静态</td>
<td style="text-align:center">文件</td>
<td style="text-align:center">内部</td>
<td style="text-align:center">不在任何函数内，使用关键字 <code>static</code></td>
</tr>
</tbody>
</table>
<p>可以看出 <code>static</code> 关键字起到一个限定的作用，限制了变量的作用域。因此在两个文件中出现有相同标识符的两个变量时，要使用 <code>static</code> 关键字对其中一个进行限定，否则可能会出现重定义。如下例：</p>
<pre><code class="language-c++">// file_1
int global = 0;
--------------------------------------------------------------
// file_2
//int global = 1;	//出现重定义
static int global = 0;	//覆盖 or 隐藏了 file_1 中的 global, 没有重定义
</code></pre>
<h1 id="3-名称空间">3. 名称空间</h1>
<p>名称空间是用于控制 <code>C++</code> 中的变量名称作用域。比如说我想在一个 <code>.cpp</code> 文件中的同一个作用域中使用两个标识符为 <code>foo</code> 的变量，那我就可以使用名称空间的方法在达到目的：</p>
<pre><code class="language-c++">namespace np_1
{
    int foo = 0;
}

namespace np_2
{
    int foo = 0;
}

int main()
{
    np_1::foo = 1;	//使用第一个 foo
    np_2::foo = 2;	//使用第二个 foo
}
</code></pre>
<p>上面的例子看起来很傻*，但是<strong>我目前认为</strong>名称空间顶多就是这种用法的复杂化，或者说名称空间就是用于解决这种问题的。</p>
<h2 id="1-using-声明和-using-编译指令">1. <code>using</code> 声明和 <code>using</code> 编译指令</h2>
<p>在上例中，如果我在 <code>main()</code> 函数中多次地使用 <code>np_1::foo</code> 变量，那每次我都要打一个前缀 <code>np_1::</code> ，这对于这个名称空间还可以接受，要是碰上了像 <code>llvm</code> 里面的那种超长名称空间，岂不是得烦死。</p>
<p>所以 <code>C++</code> 提供了 <code>using</code> 声明，就为我这种蓝狗提供了很大的便利。比如上例中 <code>np_1::foo</code> 可以简化为：</p>
<pre><code class="language-c++">using np_1::foo
// 此时不能再使用 using np_2::foo, 因为这会导致歧义
    
int main()
{
    foo = 1;	//使用第一个 foo
    np_2::foo = 2;	//使用第二个 foo
}
</code></pre>
<p>这就是 <code>using</code> 声明，可以在使用一个变量 or 函数 or 方法的时候免去输入名称空间的名字。</p>
<p>至于 <code>using</code> 编译指令就更简单了，直接使得整个名称空间中的所有变量 and 函数 and 方法都可用，可以理解为是一个极大加强版的 <code>using</code> 声明，比如：</p>
<pre><code class="language-c++">using namespace np_1

int main()
{
    foo = 1;	// np_1::foo
}
</code></pre>
<p>这个我们应该不陌生，因为大部分初学者（包括我）在写简单的 <code>.cpp</code> 文件时都会在文件头加上一句：</p>
<pre><code class="language-c++">using namespace std;	//hhhh
</code></pre>
<p>虽然很方便, 但是在实际使用时并不是很推荐, 尤其是在编写多个 <code>.cpp</code> 文件时。因为这么做实际上使得名称空间的存在失去了意义。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shell 脚本]]></title>
        <id>https://townshaw.github.io/post/shell-jiao-ben/</id>
        <link href="https://townshaw.github.io/post/shell-jiao-ben/">
        </link>
        <updated>2021-01-26T13:19:36.000Z</updated>
        <content type="html"><![CDATA[<p>这学期编译原理的实验大部分都是在 linux 终端下完成的，因为需要用 cmake 和 make 等工具，有时候为了生成一个可执行文件需要输入好几个命令，比如最后的大实验中生成可执行文件需要输入的命令有：</p>
<pre><code class="language-shell">git pull        #获取最新的代码
rm -r build     #删除原有的 build 文件
mkdir build &amp;&amp; cd build
cmake ..
make
</code></pre>
<p>这么多命令输入一次就很烦了，更何况在写实验的时候经常出现 bug，以至于总是要重新生成可执行文件来查看运行效果。于是对于我这种懒人而言，shell 脚本就是一个很好的工具。</p>
<p>目前来说，我对 shell 脚本的理解仅限于可以一次性运行多个 shell 命令，于是在学习 《鸟哥的linux私房菜》(没错又是它)，我决定把一些有用的知识记录下来。</p>
<h1 id="shell-脚本执行方式的差异">Shell 脚本执行方式的差异</h1>
<p>Shell 脚本的执行方式有三种，比如我要运行 <code>test.sh</code>，则可以用以下三种方式运行：</p>
<pre><code class="language-shell">source test.sh

sh test.sh

./test.sh       #我最常用这种
</code></pre>
<p>其中第二种和第三种执行方式效果是相同的，他们与第一种执行方式的区别在于执行脚本的 shell 是不同的。</p>
<p>先说第二和第三种执行方式吧。使用这两种执行方式去执行 shell 脚本，执行运行脚本指令的 shell 会生成一个子 shell，然后子 shell 再去执行脚本的内容，执行完成后子 shell 终结，返回到原来的 shell 中。<br>
第一种方式则是直接在原来的 shell 中执行脚本，而不会生成一个新的子 shell。</p>
<p>上面的一大段话属实看起来晦涩难受，也许配合一个例子一起看就会好理解一些 ~。</p>
<p>我先在当前文件夹下写一个定义 shell 变量的 shell 脚本，命名为 <code>test.sh</code>：</p>
<pre><code class="language-shell">myname=XT
echo $myname
</code></pre>
<p>在定义完之后会在终端中将该变量进行输出，然后分别使用上述两种方式进行执行：<br>
<code>source test.sh</code> 执行结果：<br>
<img src="https://townshaw.github.io/post-images/2021_1_26_1.png" alt="" loading="lazy"></p>
<p>而 <code>./test.sh</code> 的执行结果为：<br>
<img src="https://townshaw.github.io/post-images/2021_1_26_2.png" alt="" loading="lazy"></p>
<p>这意味着使用 <code>source test.sh</code> 时，局部变量 <code>myname</code> 切切实实地在当前的 shell 中生成了，否则 <code>myname</code> 不会被定义，输出应为空。<br>
而在用 <code>./test.sh</code> 时，局部变量在执行该脚本的 shell 中生成了，但是在执行完脚本之后的 shell 中却消失了，原因就是因为执行 <code>./test.sh</code> 时，原来的 shell 生成了一个子 shell，然后子 shell 再去执行脚本，执行完之后子 shell 终结，回到原来的 shell 中。这样就能解释为什么脚本执行时 <code>myname</code> 存在，执行完之后这个变量却消失了。</p>
<h1 id="shell-脚本的默认变量-0-1-2">Shell 脚本的默认变量 ($0, $1, $2, ...)</h1>
<p>有时我们在执行脚本时会接上很多选项，比如：</p>
<pre><code class="language-shell">/path/to/scriptname -opt1 -opt2 -opt3 -opt4
</code></pre>
<p>如果我们在写 shell 脚本时需要得到这些选项，该怎么得到呢？</p>
<p>好在脚本已经帮我们设置好了这些变量的名称，分别默认使用 <code>$1, $2, $3, ...</code> 来表示，我们可以很方便地进行引用。<br>
比如上面的命令，对应到 <code>$1, $2, ...</code> 如下：</p>
<pre><code class="language-shell">/path/to/scriptname  -opt1  -opt2  -opt3  -opt4
          $0           $1     $2     $3     $4
</code></pre>
<p>从 <code>$0</code> 开始，通过空格分隔，依次往后编号递增。且 <code>$0</code> 就是执行的脚本文件名。</p>
<p>除了这些数字的变量之外，还有一些较为特殊的变量可以在脚本内使用来调用这些参数：<br>
<code>$#</code>：代表后接的参数的个数，上例中 <code>$#</code> 为 4.<br>
<code>$@</code>：代表【&quot;$1&quot;&quot;$2&quot;&quot;$3&quot;&quot;$4&quot;】，其中每个变量都是独立的（用双引号括起来）。<br>
<code>$*</code>：代表【&quot;$1c$2c$3c$4&quot;】，其中 c 为分隔字符，默认为空格，所以本例中代表【&quot;$1 $2 $3 $4&quot;】。</p>
<h2 id="shift-进行偏移">shift 进行偏移</h2>
<p>shift 可以后面可以接数字，表示拿掉最前面的几个参数的意思。比如上面的例子中，如果执行：</p>
<pre><code class="language-shell">shift 2
</code></pre>
<p>则变量的个数从原来的四个变成最后两个，同时编号也会发生变化：</p>
<pre><code class="language-shell">-opt3  -opt4
  $1     $2
</code></pre>
<h1 id="shell-中的条件判断式">Shell 中的条件判断式</h1>
<h2 id="使用-ifthen">使用 if...then</h2>
<p>if...then 语句的语法如下：</p>
<pre><code class="language-shell">if [ 条件判断式 ]; then     #别少了 ';' 和 'then' !
    #条件判断成立时执行
fi  #if 反过来写，表示 if 结束（迷惑行为）
</code></pre>
<p>与 <code>C</code> 语言类似，多个条件判断式时，可以用 <code>&amp;&amp;</code> 和 <code>||</code> 来进行连接。为了美观也可以将多个条件判断式分别放在不同的中括号中，再用 <code>&amp;&amp;</code> 和 <code>||</code> 来连接每个中括号。</p>
<p>相比上面的单层 if...then，稍微复杂一点的有点类似于 <code>python</code> 的判断语法（主要是都用了 <code>elif</code>）：</p>
<pre><code class="language-shell">if [ 条件判断式 1 ]; then
    #条件判断 1 成立时执行
elif [ 条件判断式 2 ]; then
    #条件判断 2 成立时执行
...     #可以一直写下去...
else
    #条件判断 1 和条件判断 2 ... 都不成立时执行
fi
</code></pre>
<h2 id="使用-caseesac判断">使用 case...esac判断</h2>
<p>像 <code>C</code> 语言一样，Shell 脚本也提供了类似于 <code>switch</code> 的语句，目的是简化多重 <code>if-else</code> 带来的麻烦。语法如下：</p>
<pre><code class="language-shell">case $变量名称 in   #变量名前必须带 '$'，且别忘了 'in'
    &quot;第一个变量内容&quot;)       #需要用右括号
    #do something
    ;;      #使用两个连续分号表示该类结束
    &quot;第二个变量内容&quot;)       #同上
    #do something
    ;;      #同上
    ...
    *)      #'*'代表通配，类似于 default
    #do something
    #或者直接 exit 1，退出脚本
    ;;
esac    #case 反过来写，表示 case 结束（迷惑行为）
</code></pre>
<h2 id="利用-function-功能">利用 function 功能</h2>
<p>function 功能能够实现类似于 <code>C</code> 语言中函数的功能。语法如下：</p>
<pre><code class="language-shell">function fname() {
    #do something
}
</code></pre>
<p>但是<strong>要注意的是：因为 shell 脚本的执行方式为由上而下、由左而右，因此 shell 脚本当中的 function 的设置一定要在程序的最前面</strong>，这样才能够在执行时被找到可用的程序段。</p>
<p>另外，function 也是有内置变量的，它的内置变量与 shell 脚本很类似，变量 <code>$0</code> 为函数名称，而后续的变量也是以 <code>$1, $2, ...</code> 来替换。在 function 内无法直接通过 <code>$1</code> 等等访问到 shell 脚本的参数，若要访问则只能将 shell 脚本的参数传递给 function。</p>
<h1 id="循环loop">循环（loop）</h1>
<h2 id="不定循环-while-和-do-while">不定循环 while 和 do-while</h2>
<p>Shell 中也有类似于 <code>C</code> 中的 <code>while</code> 和 <code>do-while</code> 循环，其语法分别为：</p>
<pre><code class="language-shell">#while 循环
while [ condition ]     #condition 为条件判断式
do
    #do something
done        #标识循环的结束

#do-while 循环
until [ condition ]     #condition 为条件判断式
do
    #do something
done        #标识循环的结束
</code></pre>
<h2 id="固定循环-for">固定循环 for</h2>
<p>for 循环相比于之前的 while 和 do-while 最大的区别在于<strong>已经知道要进行几次循环</strong>，其语法如下：</p>
<pre><code class="language-shell">for var in con1 con2 con3 ...
do
    #do something
done
</code></pre>
<p>以上面的例子来说，变量 <code>$var</code> 的内容在循环工作时是不同的：</p>
<ol>
<li>第一次循环时，<code>$var</code> 内容为 con1；</li>
<li>第二次循环时，<code>$var</code> 内容为 con2；</li>
<li>第三次循环时，<code>$var</code> 内容为 con3；</li>
<li>......</li>
</ol>
<h1 id="脚本的跟踪与调试">脚本的跟踪与调试</h1>
<p>在脚本执行之前，可以使用 <code>bash</code> 的相关参数来检查脚本是否存在语法问题。<br>
在脚本执行时，也同样可以使用 <code>bash</code> 的相关参数来追踪脚本执行时的运行情况，以方便调试。<br>
可以使用的 <code>bash</code> 参数如下：</p>
<pre><code class="language-shell">sh [-nvx] scripts.sh
</code></pre>
<p>选项与参数：</p>
<ul>
<li>-n：不要执行脚本，仅查询语法的问题。若脚本语法没有问题，则不会输出任何信息。</li>
<li>-v：在执行脚本之前，会将脚本的内容输出到屏幕上。</li>
<li>-x：将使用到的脚本内容显示到屏幕上。（用于调试）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shell 变量功能]]></title>
        <id>https://townshaw.github.io/post/shell-bian-liang-gong-neng/</id>
        <link href="https://townshaw.github.io/post/shell-bian-liang-gong-neng/">
        </link>
        <updated>2021-01-25T09:29:51.000Z</updated>
        <content type="html"><![CDATA[<p>学习自《鸟哥的Linux私房菜》。<br>
因为 <code>shell</code>命令众多，所以边学边把自己认为有用 or 以后可能用到的命令或者功能记录下来。</p>
<h1 id="shell-的变量功能">Shell 的变量功能</h1>
<p>简单来说，<code>shell</code> 的变量就是用一串特定的字符串去代表不固定的内容。比如最常见的 <code>PATH</code> 变量。<code>PATH</code> 变量与日常的 linux 命令行使用息息相关。<br>
比如我们最常执行的 <code>ls</code> 和 <code>cd</code> 命令，我们以 <code>ls</code> 命令为例。<code>ls</code> 命令的本质是一个可执行文件，它处在 <code>/bin/</code> 文件夹下，完整路径应为 <code>/bin/ls</code> 。<br>
我们知道，如果要执行一个可执行文件，应该需要输入该文件的完整路径(绝对路径和相对路径都可以)，但为什么我们在 <code>~/</code> 目录下，只需要输入 <code>ls</code> 就可以执行对应的可执行文件，而不需要将完整路径 <code>/bin/ls</code> 都输入进去呢？<br>
这就是因为在 <code>PATH</code> 环境变量中存在路径 <code>/bin/</code>，而 <code>shell</code> 在执行命令时会去 <code>PATH</code> 变量指向的路径中去寻找对应的可执行文件。也就是说我们在执行 <code>ls</code> 时，<code>shell</code> 会在 <code>PATH</code> 中找到一个文件夹路径 <code>/bin/</code>，然后 <code>shell</code> 会去 <code>/bin/</code> 中查找是否有 <code>ls</code> 可执行文件，这样便免去了我们要执行 <code>ls</code> 时每次都输入完整路径的麻烦。<br>
不仅如此，<code>shell</code> 变量的存在也使得 <code>shell</code> 脚本的可扩展性、可移植性大大增强。</p>
<h1 id="变量的使用与设置">变量的使用与设置</h1>
<h2 id="变量的使用">变量的使用</h2>
<p>比如我要查看 <code>PATH</code> 环境变量，那么我需要使用 <code>echo</code> 命令，如下：</p>
<pre><code class="language-shell">echo $PATH 
#or
echo ${PATH}
</code></pre>
<p>可以使用 <code>echo</code> 指令来查看变量的内容，但是变量名前必须加上 <code>$</code> 符号。</p>
<h2 id="变量的设置">变量的设置</h2>
<p>变量在设置时，<strong>不能</strong>加上 <code>$</code> 符号，比如我要定义一个 <code>myname</code> 变量：</p>
<pre><code class="language-shell">myname=XT
</code></pre>
<p><strong>注意：</strong></p>
<ol>
<li>右边的字符串可以不需要像 <code>C</code> 语言中的那样加上引号。</li>
<li>等号左右不能直接接等号，即 <code>myname = XT</code> 是非法的。</li>
<li>变量名的开头字符不能为数字。</li>
<li>双引号内的特殊字符如 <code>$</code> 等，可以保有原本的特性，如：<pre><code class="language-shell"> var=&quot;lang is $LANG&quot;
 echo var
 -&gt; lang is zh-CN.UTF-8
</code></pre>
</li>
<li>单引号内的特殊字符如 <code>$</code> 等，则视为一般字符(纯文本)：<pre><code class="language-shell"> var='lang is $LANG'
 echo
 -&gt; lang is $LANG
</code></pre>
</li>
<li>可以使用转义字符 <code>\</code> 来将空格、回车等特殊字符转化为一般字符。</li>
<li>若该变量为扩增变量内容时，则可用 &quot;$变量名称&quot; 或 ${变量} 累加内容，如：<pre><code class="language-shell"> PATH=&quot;$PATH&quot;:/home/bin
 #or
 PATH=${PATH}:/home/bin
</code></pre>
</li>
<li>若该环境变量需要在其他子程序中执行，则需要使用 <code>export</code> 命令，否则只能在当前的 <code>shell</code> 中使用。</li>
<li>取消变量的方式为使用 <code>unset</code> 命令，如 <code>unset myname</code>。</li>
</ol>
<h2 id="环境变量的功能">环境变量的功能</h2>
<p>可以使用 <code>env</code> 命令来查看所有的默认环境变量。<br>
使用 <code>set</code> 命令来查看所有的变量，而不仅仅是环境变量。<br>
一个特殊的变量：<code>$?</code> 可以返回上一个执行的命令所返回的值，更多特殊变量可以参考《鸟哥的Linux私房菜》P323。<br>
<code>export</code> 命令：单独执行该命令与 <code>env</code> 有着相同的效果。但是 <code>export 变量名称</code> 可以将自定义变量转化为环境变量。</p>
<h2 id="变量的有效范围">变量的有效范围</h2>
<p>可以大致理解为：<br>
环境变量 = 全局变量<br>
自定义变量 = 局部变量<br>
可以使用 <code>export</code> 命令将自定义变量转化为环境变量。</p>
<p>还有些有关变量的微调指令，未完待续~~~</p>
]]></content>
    </entry>
</feed>