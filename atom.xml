<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://townshaw.github.io</id>
    <title>Welcome to TX&apos;s Blog</title>
    <updated>2021-01-26T15:16:16.373Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://townshaw.github.io"/>
    <link rel="self" href="https://townshaw.github.io/atom.xml"/>
    <subtitle>学习学习学习</subtitle>
    <logo>https://townshaw.github.io/images/avatar.png</logo>
    <icon>https://townshaw.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Welcome to TX&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Shell 脚本]]></title>
        <id>https://townshaw.github.io/post/shell-jiao-ben/</id>
        <link href="https://townshaw.github.io/post/shell-jiao-ben/">
        </link>
        <updated>2021-01-26T13:19:36.000Z</updated>
        <content type="html"><![CDATA[<p>这学期编译原理的实验大部分都是在 linux 终端下完成的，因为需要用 cmake 和 make 等工具，有时候为了生成一个可执行文件需要输入好几个命令，比如最后的大实验中生成可执行文件需要输入的命令有：</p>
<pre><code class="language-shell">git pull        #获取最新的代码
rm -r build     #删除原有的 build 文件
mkdir build &amp;&amp; cd build
cmake ..
make
</code></pre>
<p>这么多命令输入一次就很烦了，更何况在写实验的时候经常出现 bug，以至于总是要重新生成可执行文件来查看运行效果。于是对于我这种懒人而言，shell 脚本就是一个很好的工具。</p>
<p>目前来说，我对 shell 脚本的理解仅限于可以一次性运行多个 shell 命令，于是在学习 《鸟哥的linux私房菜》(没错又是它)，我决定把一些有用的知识记录下来。</p>
<h1 id="shell-脚本执行方式的差异">Shell 脚本执行方式的差异</h1>
<p>Shell 脚本的执行方式有三种，比如我要运行 <code>test.sh</code>，则可以用以下三种方式运行：</p>
<pre><code class="language-shell">source test.sh

sh test.sh

./test.sh       #我最常用这种
</code></pre>
<p>其中第二种和第三种执行方式效果是相同的，他们与第一种执行方式的区别在于执行脚本的 shell 是不同的。</p>
<p>先说第二和第三种执行方式吧。使用这两种执行方式去执行 shell 脚本，执行运行脚本指令的 shell 会生成一个子 shell，然后子 shell 再去执行脚本的内容，执行完成后子 shell 终结，返回到原来的 shell 中。<br>
第一种方式则是直接在原来的 shell 中执行脚本，而不会生成一个新的子 shell。</p>
<p>上面的一大段话属实看起来晦涩难受，也许配合一个例子一起看就会好理解一些 ~。</p>
<p>我先在当前文件夹下写一个定义 shell 变量的 shell 脚本，命名为 <code>test.sh</code>：</p>
<pre><code class="language-shell">myname=XT
echo $myname
</code></pre>
<p>在定义完之后会在终端中将该变量进行输出，然后分别使用上述两种方式进行执行：<br>
<code>source test.sh</code> 执行结果：<br>
<img src="https://townshaw.github.io/post-images/2021_1_26_1.png" alt="" loading="lazy"></p>
<p>而 <code>./test.sh</code> 的执行结果为：<br>
<img src="https://townshaw.github.io/post-images/2021_1_26_2.png" alt="" loading="lazy"></p>
<p>这意味着使用 <code>source test.sh</code> 时，局部变量 <code>myname</code> 切切实实地在当前的 shell 中生成了，否则 <code>myname</code> 不会被定义，输出应为空。<br>
而在用 <code>./test.sh</code> 时，局部变量在执行该脚本的 shell 中生成了，但是在执行完脚本之后的 shell 中却消失了，原因就是因为执行 <code>./test.sh</code> 时，原来的 shell 生成了一个子 shell，然后子 shell 再去执行脚本，执行完之后子 shell 终结，回到原来的 shell 中。这样就能解释为什么脚本执行时 <code>myname</code> 存在，执行完之后这个变量却消失了。</p>
<h1 id="shell-脚本的默认变量-0-1-2">Shell 脚本的默认变量 ($0, $1, $2, ...)</h1>
<p>有时我们在执行脚本时会接上很多选项，比如：</p>
<pre><code class="language-shell">/path/to/scriptname -opt1 -opt2 -opt3 -opt4
</code></pre>
<p>如果我们在写 shell 脚本时需要得到这些选项，该怎么得到呢？</p>
<p>好在脚本已经帮我们设置好了这些变量的名称，分别默认使用 <code>$1, $2, $3, ...</code> 来表示，我们可以很方便地进行引用。<br>
比如上面的命令，对应到 <code>$1, $2, ...</code> 如下：</p>
<pre><code class="language-shell">/path/to/scriptname  -opt1  -opt2  -opt3  -opt4
          $0           $1     $2     $3     $4
</code></pre>
<p>从 <code>$0</code> 开始，通过空格分隔，依次往后编号递增。且 <code>$0</code> 就是执行的脚本文件名。</p>
<p>除了这些数字的变量之外，还有一些较为特殊的变量可以在脚本内使用来调用这些参数：<br>
<code>$#</code>：代表后接的参数的个数，上例中 <code>$#</code> 为 4.<br>
<code>$@</code>：代表【&quot;$1&quot;&quot;$2&quot;&quot;$3&quot;&quot;$4&quot;】，其中每个变量都是独立的（用双引号括起来）。<br>
<code>$*</code>：代表【&quot;$1c$2c$3c$4&quot;】，其中 c 为分隔字符，默认为空格，所以本例中代表【&quot;$1 $2 $3 $4&quot;】。</p>
<h2 id="shift-进行偏移">shift 进行偏移</h2>
<p>shift 可以后面可以接数字，表示拿掉最前面的几个参数的意思。比如上面的例子中，如果执行：</p>
<pre><code class="language-shell">shift 2
</code></pre>
<p>则变量的个数从原来的四个变成最后两个，同时编号也会发生变化：</p>
<pre><code class="language-shell">-opt3  -opt4
  $1     $2
</code></pre>
<h1 id="shell-中的条件判断式">Shell 中的条件判断式</h1>
<h2 id="使用-ifthen">使用 if...then</h2>
<p>if...then 语句的语法如下：</p>
<pre><code class="language-shell">if [ 条件判断式 ]; then     #别少了 ';' 和 'then' !
    #条件判断成立时执行
fi  #if 反过来写，表示 if 结束（迷惑行为）
</code></pre>
<p>与 <code>C</code> 语言类似，多个条件判断式时，可以用 <code>&amp;&amp;</code> 和 <code>||</code> 来进行连接。为了美观也可以将多个条件判断式分别放在不同的中括号中，再用 <code>&amp;&amp;</code> 和 <code>||</code> 来连接每个中括号。</p>
<p>相比上面的单层 if...then，稍微复杂一点的有点类似于 <code>python</code> 的判断语法（主要是都用了 <code>elif</code>）：</p>
<pre><code class="language-shell">if [ 条件判断式 1 ]; then
    #条件判断 1 成立时执行
elif [ 条件判断式 2 ]; then
    #条件判断 2 成立时执行
...     #可以一直写下去...
else
    #条件判断 1 和条件判断 2 ... 都不成立时执行
fi
</code></pre>
<h2 id="使用-caseesac判断">使用 case...esac判断</h2>
<p>像 <code>C</code> 语言一样，Shell 脚本也提供了类似于 <code>switch</code> 的语句，目的是简化多重 <code>if-else</code> 带来的麻烦。语法如下：</p>
<pre><code class="language-shell">case $变量名称 in   #变量名前必须带 '$'，且别忘了 'in'
    &quot;第一个变量内容&quot;)       #需要用右括号
    #do something
    ;;      #使用两个连续分号表示该类结束
    &quot;第二个变量内容&quot;)       #同上
    #do something
    ;;      #同上
    ...
    *)      #'*'代表通配，类似于 default
    #do something
    #或者直接 exit 1，退出脚本
    ;;
esac    #case 反过来写，表示 case 结束（迷惑行为）
</code></pre>
<h2 id="利用-function-功能">利用 function 功能</h2>
<p>function 功能能够实现类似于 <code>C</code> 语言中函数的功能。语法如下：</p>
<pre><code class="language-shell">function fname() {
    #do something
}
</code></pre>
<p>但是**要注意的是：因为 shell 脚本的执行方式为由上而下、由左而右，因此 shell 脚本当中的 function 的设置一定要在程序的最前面，**这样才能够在执行时被找到可用的程序段。</p>
<p>另外，function 也是有内置变量的，它的内置变量与 shell 脚本很类似，变量 <code>$0</code> 为函数名称，而后续的变量也是以 <code>$1, $2, ...</code> 来替换。在 function 内无法直接通过 <code>$1</code> 等等访问到 shell 脚本的参数，若要访问则只能将 shell 脚本的参数传递给 function。</p>
<h1 id="循环loop">循环（loop）</h1>
<h2 id="不定循环-while-和-do-while">不定循环 while 和 do-while</h2>
<p>Shell 中也有类似于 <code>C</code> 中的 <code>while</code> 和 <code>do-while</code> 循环，其语法分别为：</p>
<pre><code class="language-shell">#while 循环
while [ condition ]     #condition 为条件判断式
do
    #do something
done        #标识循环的结束

#do-while 循环
until [ condition ]     #condition 为条件判断式
do
    #do something
done        #标识循环的结束
</code></pre>
<h2 id="固定循环-for">固定循环 for</h2>
<p>for 循环相比于之前的 while 和 do-while 最大的区别在于<strong>已经知道要进行几次循环</strong>，其语法如下：</p>
<pre><code class="language-shell">for var in con1 con2 con3 ...
do
    #do something
done
</code></pre>
<p>以上面的例子来说，变量 <code>$var</code> 的内容在循环工作时是不同的：</p>
<ol>
<li>第一次循环时，<code>$var</code> 内容为 con1；</li>
<li>第二次循环时，<code>$var</code> 内容为 con2；</li>
<li>第三次循环时，<code>$var</code> 内容为 con3；</li>
<li>......</li>
</ol>
<h1 id="脚本的跟踪与调试">脚本的跟踪与调试</h1>
<p>//时间不早了睡觉去了，未完待续 ~~~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shell 变量功能]]></title>
        <id>https://townshaw.github.io/post/shell-bian-liang-gong-neng/</id>
        <link href="https://townshaw.github.io/post/shell-bian-liang-gong-neng/">
        </link>
        <updated>2021-01-25T09:29:51.000Z</updated>
        <content type="html"><![CDATA[<p>学习自《鸟哥的Linux私房菜》。<br>
因为 <code>shell</code>命令众多，所以边学边把自己认为有用 or 以后可能用到的命令或者功能记录下来。</p>
<h1 id="shell-的变量功能">Shell 的变量功能</h1>
<p>简单来说，<code>shell</code> 的变量就是用一串特定的字符串去代表不固定的内容。比如最常见的 <code>PATH</code> 变量。<code>PATH</code> 变量与日常的 linux 命令行使用息息相关。<br>
比如我们最常执行的 <code>ls</code> 和 <code>cd</code> 命令，我们以 <code>ls</code> 命令为例。<code>ls</code> 命令的本质是一个可执行文件，它处在 <code>/bin/</code> 文件夹下，完整路径应为 <code>/bin/ls</code> 。<br>
我们知道，如果要执行一个可执行文件，应该需要输入该文件的完整路径(绝对路径和相对路径都可以)，但为什么我们在 <code>~/</code> 目录下，只需要输入 <code>ls</code> 就可以执行对应的可执行文件，而不需要将完整路径 <code>/bin/ls</code> 都输入进去呢？<br>
这就是因为在 <code>PATH</code> 环境变量中存在路径 <code>/bin/</code>，而 <code>shell</code> 在执行命令时会去 <code>PATH</code> 变量指向的路径中去寻找对应的可执行文件。也就是说我们在执行 <code>ls</code> 时，<code>shell</code> 会在 <code>PATH</code> 中找到一个文件夹路径 <code>/bin/</code>，然后 <code>shell</code> 会去 <code>/bin/</code> 中查找是否有 <code>ls</code> 可执行文件，这样便免去了我们要执行 <code>ls</code> 时每次都输入完整路径的麻烦。<br>
不仅如此，<code>shell</code> 变量的存在也使得 <code>shell</code> 脚本的可扩展性、可移植性大大增强。</p>
<h1 id="变量的使用与设置">变量的使用与设置</h1>
<h2 id="变量的使用">变量的使用</h2>
<p>比如我要查看 <code>PATH</code> 环境变量，那么我需要使用 <code>echo</code> 命令，如下：</p>
<pre><code class="language-shell">echo $PATH 
#or
echo ${PATH}
</code></pre>
<p>可以使用 <code>echo</code> 指令来查看变量的内容，但是变量名前必须加上 <code>$</code> 符号。</p>
<h2 id="变量的设置">变量的设置</h2>
<p>变量在设置时，<strong>不能</strong>加上 <code>$</code> 符号，比如我要定义一个 <code>myname</code> 变量：</p>
<pre><code class="language-shell">myname=XT
</code></pre>
<p><strong>注意：</strong></p>
<ol>
<li>右边的字符串可以不需要像 <code>C</code> 语言中的那样加上引号。</li>
<li>等号左右不能直接接等号，即 <code>myname = XT</code> 是非法的。</li>
<li>变量名的开头字符不能为数字。</li>
<li>双引号内的特殊字符如 <code>$</code> 等，可以保有原本的特性，如：<pre><code class="language-shell"> var=&quot;lang is $LANG&quot;
 echo var
 -&gt; lang is zh-CN.UTF-8
</code></pre>
</li>
<li>单引号内的特殊字符如 <code>$</code> 等，则视为一般字符(纯文本)：<pre><code class="language-shell"> var='lang is $LANG'
 echo
 -&gt; lang is $LANG
</code></pre>
</li>
<li>可以使用转义字符 <code>\</code> 来将空格、回车等特殊字符转化为一般字符。</li>
<li>若该变量为扩增变量内容时，则可用 &quot;$变量名称&quot; 或 ${变量} 累加内容，如：<pre><code class="language-shell"> PATH=&quot;$PATH&quot;:/home/bin
 #or
 PATH=${PATH}:/home/bin
</code></pre>
</li>
<li>若该环境变量需要在其他子程序中执行，则需要使用 <code>export</code> 命令，否则只能在当前的 <code>shell</code> 中使用。</li>
<li>取消变量的方式为使用 <code>unset</code> 命令，如 <code>unset myname</code>。</li>
</ol>
<h2 id="环境变量的功能">环境变量的功能</h2>
<p>可以使用 <code>env</code> 命令来查看所有的默认环境变量。<br>
使用 <code>set</code> 命令来查看所有的变量，而不仅仅是环境变量。<br>
一个特殊的变量：<code>$?</code> 可以返回上一个执行的命令所返回的值，更多特殊变量可以参考《鸟哥的Linux私房菜》P323。<br>
<code>export</code> 命令：单独执行该命令与 <code>env</code> 有着相同的效果。但是 <code>export 变量名称</code> 可以将自定义变量转化为环境变量。</p>
<h2 id="变量的有效范围">变量的有效范围</h2>
<p>可以大致理解为：<br>
环境变量 = 全局变量<br>
自定义变量 = 局部变量<br>
可以使用 <code>export</code> 命令将自定义变量转化为环境变量。</p>
<p>还有些有关变量的微调指令，未完待续~~~</p>
]]></content>
    </entry>
</feed>